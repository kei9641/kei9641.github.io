I"W<p>비전공자, 노베이스에서 시작, 1년간 교육을 받으며 공식문서를 보며 가벼운 프로젝트를 거뜬히 만들 정도로 코딩 실력이 엄청 늘었다고 느꼈지만, 현업 개발자로 뛰어들기에 1년은 짧은 시간이었다. <strong>개발자로써 어떻게 성장</strong> 해야하는지 방향성을 잡지 않은 채 1년 동안 빠듯한 커리큘럼에 끌려다니며 하루종일 코딩만 했다. 의욕은 넘쳐서 짜투리 시간마다 알고리즘을 주구장창 풀었지만 이것만으로 개발자가 될 수 없었다. 방향성을 잡기위해 지난 1년을 되돌아보며 문제점에 대해 생각해보니 기술 블로그를 만들기부터 시작해야겠다는 결론에 도달하였다.</p>

<p class="bottomless">우선, 방향성을 잃지 않도록 개선해야 할 문제점들을 정리해두기로 했다.</p>
<h3 id="1-직무-이해">1. 직무 이해</h3>

<p>무작정 웹을 가르쳐주니 배우게 되었다. 웹을 배우고 프로젝트를 진행하며 프론트엔드에 흥미를 느끼게 되었지만 프론트엔드 개발자가 하는 일을 “페이지 만드는 개발자” 정도로 이해하고 있었다. 프로젝트를 할 때도 자연스레 프론트엔드를 맡은 사람이 프론트엔드 개발자가 하는 일 뿐만 아니라 구체적인 서비스의 흐름, 디자인까지 담당하였다. 그래서인지 프론트엔드 개발자와 퍼블리셔, 그리고 퍼블리셔와 웹디자이너가 <strong>하는 일</strong> 이 무엇인지 혼란이 왔다. 이 상태로 취업을 준비하다보니 어딘가 아주 잘못된 부분이 있는 듯하여 시간이 걸리더라도 민폐는 되고 싶지 않기에 돌아가는 길을 택하게 되었다.</p>

<p>비전공자는 학습하기 쉬운 python, vue.js, django를 배웠다.  다른 기술스택(java, Servlet, JSP, Mybatis) 을 배운 전공자들과 함께 프로젝트를 진행하며 가끔 무슨 이야기를 하는지 알아듣기 어려운 경우가 있었다. <code class="language-plaintext highlighter-rouge">django</code>는 사용자인증, admin페이지, orm 등 기본적으로 제공하는 기능이 많아 <strong>편리</strong> 하였지만, 직접 기능을 만든 적이 없었기에 정확한 <strong>동작 원리</strong> 를 이해하지 못하고 넘어가게 되었다. <code class="language-plaintext highlighter-rouge">vue.js</code>는 주로 vue-cli를 사용하여 똑같이 <strong>동작 원리</strong> 에 대해 모르는 것이 많다는 것을 알게 되었다. 이는 코딩을 시작할 때 머뭇거리게 되는 이유이므로 <strong>동작 원리</strong> 를 큰 틀로 삼아 빠르게 시작할 수 있도록 정리할 예정이다.</p>

<p><a href="#to_be_continue"><span class="relation"># 웹개발자</span></a>
   <a href="#to_be_continue"><span class="relation"># 직무이해</span></a>
   <a href="#to_be_continue"><span class="relation"># Web</span></a>
   <a href="#to_be_continue"><span class="relation"># 동작원리</span></a> 
   <a href="#to_be_continue"><span class="relation"># 기술스택</span></a></p>

<h3 id="2-지식-공유">2. 지식 공유</h3>

<p>코딩하는 법을 위주로 학습하다보니 <strong>IT 지식</strong> 이 얕았다. 직무 면접에서 받은 질문들에 대해 어렴풋이 알고 있었지만 정리해서 간단명료하게 말하기 어려웠다. 기술 블로그에 정리해보며 아는 것과 모르는 것을 파악하고자 한다. 되도록 코딩을 전혀 모르는 사람이 읽어도 이해할 수 있도록 쉽게 쓰려고 노력할 것이다. 내 블로그 글을 읽는 사람들이 나처럼 헤매지 않았으면 좋겠다.</p>

<p><a href="#to_be_continue"><span class="relation"># interview</span></a>
   <a href="/tags/a.html"><span class="relation"># 기술블로그</span></a>
   <a href="#to_be_continue"><span class="relation"># 개념</span></a></p>

<h3 id="3-코드-리뷰">3. 코드 리뷰</h3>

<p>팀프로젝트를 비교적 소수인 5~6명의 팀원들과 함께 했기에 크게 꼬이는 부분도 없었고, 다른 팀원의 코드를 수정해야하거나 이어받아 할 때 코드가 복잡해도 대화로 충분히 해결할 수 있었다. 프로젝트 기간도 짧았기에 더욱 <strong>리팩토링</strong> 을 해야한다는 생각을 하지 못했다. 하지만 현업에서는 코드가 훨씬 복잡하고 수정하기 어렵기 때문에 <strong>리팩토링</strong> 작업은 필수적으로 진행되어야 한다는 사실을 알게 되었다.</p>

<p>알고리즘 문제를 풀 때도 혼자 끙끙대며 문제를 푸는 것을 목표로 삼다보니 코드 리뷰를 소홀히 했다. 문제를 맞추는데만 집중하다보니 당연히 효율성에서 점수가 낮게 나왔다. 점점 더 많은 문제를 접할수록 문제를 풀고난 뒤 다른 사람들의 코드를 보며 더 효율적인 코드 에 대해 고민해볼 필요성을 느끼게 되었다. <strong>최적화</strong> 과정은 대용량 데이터를 다루는 웹에서 꼭 필요한 과정으로 이를 잘 공부하여 개발자로서 나의 강점이 될거라 기대한다.</p>

<p><a href="#to_be_continue"><span class="relation"># 클린코드</span></a>
   <a href="#to_be_continue"><span class="relation"># 코드리뷰</span></a>
   <a href="#to_be_continue"><span class="relation"># 최적화</span></a></p>

<p><br />
‘현업에 가서 내가 뭘 할 수 있을까’라는 의문에서 시작된 생각이 앞으로 나아갈 방향이 되고 있다. 코딩이 좋아서 시작한만큼 현업에서도 IT개발자로 잘 해낼 수 있도록 탄탄한 기초를 다지고 싶다. 부족하다고 느낀 부분에 대해 처음부터 다시 정리해보며 놓친 부분을 내 것으로 만드는 것이 기술 블로그의 목표이다. 시간이 많이 걸리겠지만 차츰 습관이 되면 더 좋은 개발자가 될 거라 확신한다.</p>

<p>프로젝트를 하다 어려움에 직면하거나 궁금증이 생길 때 먼저 같은 고민을 했던 개발자분들께서 기술 블로그를 운영해주셔서 많은 도움을 받았다. 나 또한 기술 블로그를 운영하며 누군가에게 새로운 지식을 알려주었으면 하는 바램이다.</p>

<p><strong>아직 모르는게 많아 잘못된 내용이 있을수도 있으니 피드백해주실 부분이나 조언이 있다면 언제든지 환영입니다^.^</strong></p>
:ET